#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 23, 2019 10:46:40 AM IST  platform: Windows NT



import sys
import numpy as np
import csv
import pandas as pd
import matplotlib.pyplot as plt
#%matplotlib inline
import seaborn as sns
#import cPickle as pickle
import pickle 
from sklearn.metrics.pairwise import cosine_similarity

global selectvalue

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    

import unknown1_support
import unknown2
import os.path

def callbackFunc(self):
     #print("New Element Selected")
     global k
     print(s.get())
     unknown2.z=s.get()
     k=s.get()
     print(k)

     yum_ingr = pd.read_pickle('/project dataset/Flavor-Network-master/data/yummly_ingr.pkl')
     yum_ingr2 = yum_ingr.reset_index(drop=True)
     yum_ingr5=pd.read_csv('/project dataset/pkl files/ingr2.csv')
     test=yum_ingr5.loc[yum_ingr2['recipeName']==k]
     idx=test['Unnamed']
     print(idx)
     idx1=idx.to_string()
     idx2=idx1[:4]
     idx3=int(idx2,10)
     finddishes(idx3,similar_cuisine=False)
     
     
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    print ('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    print ('prog_location = {}'.format(prog_location))
    sys.stdout.flush()
    root = tk.Tk()
    unknown1_support.set_Tk_var()
    top = Toplevel1 (root)
    unknown1_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    print ('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    print ('prog_location = {}'.format(prog_location))
    rt = root
    w = tk.Toplevel (root)
    unknown1_support.set_Tk_var()
    top = Toplevel1 (w)
    unknown1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

def finddishes(idx,similar_cuisine=False):

    yum_ingr = pd.read_pickle('/project dataset/Flavor-Network-master/data/yummly_ingr.pkl')
    yum_ingr2 = yum_ingr.reset_index(drop=True)

    yum_ingrX = pd.read_pickle('/project dataset/Flavor-Network-master/data/yummly_ingrX.pkl')
    yum_tfidf = pd.read_pickle('/project dataset/Flavor-Network-master/data/yum_tfidf.pkl')
    yum_ingr5=pd.read_csv('/project dataset/pkl files/ingr2.csv')
    yum_cos = cosine_similarity(yum_tfidf)
    
    cuisine = yum_ingr2.iloc[idx]['cuisine']
    print ('Dishes similar to', yum_ingr2.ix[idx, 'recipeName'], '('+yum_ingr2.ix[idx, 'cuisine']+')')
    match = yum_ingr2.iloc[yum_cos[idx].argsort()[-21:-1]][::-1]
    print(match)

    if not similar_cuisine:
        submatch = match[match['cuisine']!=cuisine]
    else:
        submatch = match
    #print(submatch['cuisine'])
    submatch1 = submatch.drop_duplicates(['cuisine'], keep='first')
    print(submatch1['cuisine'])
    header = ["cuisine" , "ingredients"]
    submatch1.to_csv('sub.csv', columns = header)
##    global cv
    #submatch2 = yum_ingr2['recipeName']
    #submatch2 = open("/project dataset/Book1.txt",encoding="utf8")

    # Program extracting first column 
##    import xlrd 
##    loc = ("/project dataset/Book1.xlsx") 
##
##    wb = xlrd.open_workbook(loc) 
##    sheet = wb.sheet_by_index(0) 
##    sheet.cell_value(0, 0) 
##
##    cv=[]
##    for i in range(sheet.nrows): 
##            cv.append(sheet.cell_value(i, 0))
   
    

    
class Toplevel1:

    
    def __init__(self,top=None):
     #def __init__(top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        font9 = "-family {Segoe UI} -size 14 -weight bold"

        top.geometry("600x450+450+97")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.0, rely=-0.022, height=831, width=1380)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="#000000")
        self.Label1.configure(background="#0d0819")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location,"foodpair.png")
        self._img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=self._img0)
        #self.Label1.configure(text='''Label''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.671, rely=0.284, height=41, width=244)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Recipe Name''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        import xlrd 
        loc = ("/project dataset/Book1.xlsx") 

        wb = xlrd.open_workbook(loc) 
        sheet = wb.sheet_by_index(0) 
        sheet.cell_value(0, 0) 

        cv=[]
        for i in range(sheet.nrows): 
                cv.append(sheet.cell_value(i, 0))

        self.TCombobox1 = ttk.Combobox(top)
        global s
        s= self.TCombobox1
        self.TCombobox1.place(relx=0.652, rely=0.411, relheight=0.047
                , relwidth=0.238)
        self.TCombobox1.configure(font=font9)
        self.value_list = cv
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(textvariable=unknown1_support.combobox)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.bind("<<ComboboxSelected>>",callbackFunc)
       

        
        
        

         

       

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.71, rely=0.596, height=54, width=157)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=unknown1_support.display)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font=font9)
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Next''')


       





if __name__ == '__main__':

    yum_ingr = pd.read_pickle('/project dataset/Flavor-Network-master/data/yummly_ingr.pkl')
    yum_ingrX = pd.read_pickle('/project dataset/Flavor-Network-master/data/yummly_ingrX.pkl')
    yum_tfidf = pd.read_pickle('/project dataset/Flavor-Network-master/data/yum_tfidf.pkl')
    yum_ingr5=pd.read_csv('/project dataset/pkl files/ingr2.csv')
    yum_cos = cosine_similarity(yum_tfidf)
    yum_ingr2 = yum_ingr.reset_index(drop=True)
    
    global k
    

    vp_start_gui()
    test=yum_ingr5.loc[yum_ingr2['recipeName']==k]
    print("Hi this is test")
    print(test)
    idx=test['Unnamed']
    
    print(idx)
    idx1=idx.to_string()
    idx2=idx1[:4]
    idx3=int(idx2,10)
    finddishes(idx3,similar_cuisine=False)
    print("ID:")
    
    print("Recipe Nmae:")
    print(k)
    





